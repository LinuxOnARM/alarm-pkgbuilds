# Linux AArch64
# Maintainer: MaxineToTheStars <https://github.com/MaxineToTheStars>

# Package Base
pkgbase=linux

# Package Name
pkgname=(
    "${pkgbase}"
    "${pkgbase}-headers"
    "${pkgbase}-docs"
)

# Package Version
pkgver=6.6.8.aarch64

# Release Number
pkgrel=1

# Package Description
pkgdesc='Linux'

# URL
url='https://github.com/LinuxOnARM/linux'

# Suitable Architectures
arch=( 'x86_64' )

# Package License
license=( 'GPL2' )

# Build Dependencies
makedepends=(
    bc
    cpio
    gettext
    graphviz
    imagemagick
    libelf
    pahole
    perl
    python
    python-sphinx
    tar
    texlive-latexextra
    xz
)

# Option
options=( '!strip' )

# Source files
_sourceName=linux-${pkgver%.*}
source=(
    https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_sourceName}.tar.{xz,sign}
    config
)

# Checksums
# https://www.kernel.org/pub/linux/kernel/v6.x/sha256sums.asc
sha256sums=( 5036c434e11e4b36d8da3f489851f7f829cf785fa7f7887468537a9ea4572416 SKIP e0a9158e72579fb1143bf345d981d7da8748848851497d063f38ff8e6448dd2e )

# Valid Keys
validpgpkeys=(
    ABAF11C65A2970B130ABE3C479BE3E4300411886  # Linus Torvalds
    647F28654894E3BD457199BE38DBBDC86092693E  # Greg Kroah-Hartman
    A2FF3A36AAA56654109064AB19802F8B0D70FC30  # Jan Alexander Steffens (heftig)
)

# Prepare the package for building
prepare() {
    # Switch to Linux source
    cd $_sourceName
    
    # Log
    echo "Setting package version..."
    
    # Set package version
    echo "-${pkgrel}" > localversion.10-pkgrel
    echo "${pkgbase#linux}" > localversion.20-pkgname
    
    # Apply patches (if any)
    local sourcePackage
    for sourcePackage in "${source[@]}"; do
        # Really fancy way of removing everything
        # but the file extension
        sourcePackage="${src%%::*}"
        sourcePackage="${src##*/}"
        sourcePackage="${src%.zst}"
        
        # Check if .patch file is found
        [[ $sourcePackage = *.patch ]] || continue
        
        # Log
        echo "Apply patch to Kernel... || ${sourcePackage}"
        
        # Apply the patch
        patch --forward --strip=1 < "../${sourcePackage}"
    done
    
    # Log
    echo "Setting configuration file..."
    
    # Set the configuration file
    cp --recursive --update --verbose ../config .config
    
    # Makeflags
    local MAKEFLAGS="ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j8"
    
    # https://bbs.archlinux.org/viewtopic.php?pid=1816552#p1816552
    make $MAKEFLAGS prepare
    
    # Get Kernel version
    make $MAKEFLAGS -s kernelrelease > version
    
    # Log
    echo "Done preparing Linux v${pkgbase} ($(<version))"
}

build() {
    # Switch to Linux source
    cd $_sourceName
    
    # Makeflags
    local MAKEFLAGS="ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j8"
    
    # Build for aarch64
    make $MAKEFLAGS all
    
    # Build documentation
    make $MAKEFLAGS htmldocs
}

_package() {
    # Package description
    pkgdesc="The ${pkgdesc} Kernel and modules for AArch64"
    
    depends=(
        coreutils
        initramfs
        kmod
    )
    
    optdepends=(
        'linux-firmware: firmware images needed for some devices'
        'wireless-regdb: to set the correct wireless channels of your country'
    )
    
    provides=(
        KSMBD-MODULE
        VIRTUALBOX-GUEST-MODULES
        WIREGUARD-MODULE
    )
    
    replaces=(
        virtualbox-guest-modules-arch
        wireguard-arch
    )
    
    # Switch to Linux source
    cd $_sourceName
    
    # Variables
    local MAKEFLAGS="ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j8"
    local modulesDirectory="${pkgdir}/usr/lib/modules/$(<version)"
    
    # Log
    echo "Installing boot image..."
    
    # SystemD expects to find the Kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make $MAKEFLAGS -s image_name)" "${modulesDirectory}/vmlinuz"
    
    # Used by mkinitcpio to name the Kernel
    echo "${pkgbase}" | install -Dm644 /dev/stdin "${modulesDirectory}/pkgbase"
    
    # Log
    echo "Installing modules..."
    
    # ???
    ZSTD_CLEVEL=19 make $MAKEFLAGS INSTALL_MOD_PATH="${pkgdir}/usr" INSTALL_MOD_STRIP=1 DEPMOD=/doesnt/exist modules_install
    
    # Remove build link
    rm "${modulesDirectory}/build"
}

_package-headers() {
    # Package description
    pkgdesc="Headers and scripts for building modules for the ${pkgdesc} Kernel"
    
    depends=(
        pahole
    )
    
    # Switch to Linux source
    cd $_sourceName
    
    # Variables
    local MAKEFLAGS="ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j8"
    local buildDirectory="${pkgdir}/usr/lib/modules/$(<version)/build"
    
    # Log
    echo "Installing build files..."
    
    # Install build files
    install -Dt "${buildDirectory}" -m644 .config Makefile Module.symvers System.map localversion.* version vmlinux
    install -Dt "${buildDirectory}/kernel" -m644 kernel/Makefile
    install -Dt "${buildDirectory}/arch/arm64" -m644 arch/arm64/Makefile
    cp --archive --target-directory "${buildDirectory}" scripts
    
    # Requirement for STACK_VALIDATION
    install -Dt "${buildDirectory}/tools/objtool" tools/objtool/objtool
    
    # Requirement for DEBUG_INFO_BTF_MODULES
    install -Dt "${buildDirectory}/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
    
    # Log
    echo "Installing headers..."
    
    # Copy headers
    cp --archive --target-directory "${buildDirectory}" include
    cp --archive --target-directory "${buildDirectory}" arch/arm64/include
    
    # Install
    install -Dt "${buildDirectory}/arch/arm64/kernel" -m644 arch/arm64/kernel/asm-offsets.s
    install -Dt "${buildDirectory}/drivers/md" -m644 drivers/md/*.h
    install -Dt "${buildDirectory}/net/mac80211" -m644 net/mac80211/*.h
    
    # https://bugs.archlinux.org/task/13146
    install -Dt "${buildDirectory}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h
    
    # https://bugs.archlinux.org/task/20402
    install -Dt "${buildDirectory}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "${buildDirectory}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "${buildDirectory}/drivers/media/tuners" -m644 drivers/media/tuners/*.h
    
    # https://bugs.archlinux.org/task/71392
    install -Dt "${buildDirectory}/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h
    
    # Log
    echo "Installing Kernel configuration files..."
    find . -name 'Kconfig*' -exec install -Dm644 {} "${buildDirectory}/{}" \;
    
    # Log
    echo "Removing unneeded architectures..."
    
    # Remove other architectures
    local arch
    for arch in "${buildDirectory}"/arch/*/; do
        [[ $arch = */arm64/ ]] && continue
        # Log
        echo "Removing architecture $(basename "${arch}")"
        
        # Remove architecture
        rm --recursive --force "${arch}"
    done
    
    # Log
    echo "Removing documentation"
    
    # Remove documentation
    rm --recursive --force "${buildDirectory}/Documentation"
    
    # Log
    echo "Removing broken symlinks..."
    
    # Remove broken symlinks
    find -L "${buildDirectory}" -type l -printf 'Removing %P\n' -delete
    
    # Log
    echo "Removing loose objects..."
    
    # Remove loose objects
    find "${buildDirectory}" -type f -name '*.o' -printf 'Removing %P\n' -delete
    
    # Log
    echo "Stripping build tools..."
    
    # Strip build tools
    local file
    while read -rd '' file; do
        case "$(file -Sib "$file")" in
            application/x-sharedlib\;*)      # Libraries (.so)
            strip -v $STRIP_SHARED "$file" ;;
            application/x-archive\;*)        # Libraries (.a)
            strip -v $STRIP_STATIC "$file" ;;
            application/x-executable\;*)     # Binaries
            strip -v $STRIP_BINARIES "$file" ;;
            application/x-pie-executable\;*) # Relocatable binaries
            strip -v $STRIP_SHARED "$file" ;;
        esac
    done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

    # Log
    echo "Stripping vmlinux"

    # Strip vmlinux
    strip --verbos $STRIP_STATIC "${buildDirectory}/vmlinux"

    # Log
    echo "Adding symlink"

    # Add symlink
    mkdir --parents "${pkgdir}/usr/src"
    ln -sr "${buildDirectory}" "${pkgdir}/usr/src/${pkgbase}"
}

_package-docs() {
    echo "yep"
}

for _p in "${pkgname[@]}"; do
    eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
    }"
done